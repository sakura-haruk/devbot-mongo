// commandes/roleAssignment.js - VERSION CORRIG√âE
import { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, PermissionsBitField } from 'discord.js';
import { getGuildSettings, saveGuildSettings } from '../mongoManager.js';

// Fonction pour v√©rifier si l'utilisateur a les r√¥les requis
function hasRequiredRoles(member, requiredRoleIds) {
  if (!requiredRoleIds || requiredRoleIds.length === 0) {
    return true; // Aucune restriction si pas de r√¥les configur√©s
  }
  
  const memberRoleIds = member.roles.cache.map(role => role.id);
  return requiredRoleIds.some(roleId => memberRoleIds.includes(roleId));
}

// ===== VERSION DEBUG DU SYST√àME D'ATTRIBUTION DE R√îLES =====
// Fonction principale pour g√©rer les attributions de r√¥les
export async function handleRoleAssignment(type, data, client) {
  try {
    const { guild, user, member, messageId, emoji, buttonId, command } = data;
    
    console.log(`[ROLE DEBUG] D√©but handleRoleAssignment - Type: ${type}`);
    console.log(`[ROLE DEBUG] Donn√©es re√ßues:`, {
      guild: guild?.name,
      user: user?.tag,
      messageId,
      emoji,
      buttonId,
      command
    });
    
    const guildSettings = await getGuildSettings(guild.id);
    console.log(`[ROLE DEBUG] Settings r√©cup√©r√©s pour ${guild.name}:`, {
      hasRoleAssignmentSystems: !!guildSettings?.roleAssignmentSystems,
      systemCount: guildSettings?.roleAssignmentSystems?.length || 0,
      systems: guildSettings?.roleAssignmentSystems?.map(s => ({
        id: s.id,
        name: s.name,
        condition: s.condition,
        enabled: s.enabled,
        targetRole: s.targetRole,
        triggerData: s.triggerData
      })) || []
    });
    
    if (!guildSettings?.roleAssignmentSystems?.length) {
      console.log(`[ROLE DEBUG] Aucun syst√®me d'attribution de r√¥les configur√© pour ${guild.name}`);
      return;
    }

    // Trouver les syst√®mes correspondants
    const matchingSystems = guildSettings.roleAssignmentSystems.filter(system => {
      console.log(`[ROLE DEBUG] V√©rification syst√®me '${system.name}' (${system.id}):`);
      console.log(`[ROLE DEBUG] - Enabled: ${system.enabled}`);
      console.log(`[ROLE DEBUG] - Condition: ${system.condition}`);
      console.log(`[ROLE DEBUG] - TriggerData:`, system.triggerData);
      
      if (!system.enabled) {
        console.log(`[ROLE DEBUG] - Syst√®me d√©sactiv√©, ignor√©`);
        return false;
      }
      
      switch (type) {
        case 'member_join':
          const isJoinMatch = system.condition === 'member_join';
          console.log(`[ROLE DEBUG] - member_join match: ${isJoinMatch}`);
          return isJoinMatch;
          
        case 'reaction_add':
          const isReactionMatch = system.condition === 'reaction_add' && 
                 system.triggerData?.messageId === messageId &&
                 system.triggerData?.emoji === emoji;
          console.log(`[ROLE DEBUG] - reaction_add match: ${isReactionMatch}`);
          console.log(`[ROLE DEBUG] - Message ID match: ${system.triggerData?.messageId} === ${messageId} = ${system.triggerData?.messageId === messageId}`);
          console.log(`[ROLE DEBUG] - Emoji match: '${system.triggerData?.emoji}' === '${emoji}' = ${system.triggerData?.emoji === emoji}`);
          return isReactionMatch;
                 
        case 'button_click':
          const isButtonMatch = system.condition === 'button_click' && 
                 system.triggerData?.buttonId === buttonId;
          console.log(`[ROLE DEBUG] - button_click match: ${isButtonMatch}`);
          return isButtonMatch;
                 
        case 'command_use':
          const isCommandMatch = system.condition === 'command_use' && 
                 system.triggerData?.command === command;
          console.log(`[ROLE DEBUG] - command_use match: ${isCommandMatch}`);
          return isCommandMatch;
                 
        default:
          console.log(`[ROLE DEBUG] - Type inconnu: ${type}`);
          return false;
      }
    });

    console.log(`[ROLE DEBUG] Syst√®mes correspondants trouv√©s: ${matchingSystems.length}`);

    // Attribuer les r√¥les
    for (const system of matchingSystems) {
      try {
        console.log(`[ROLE DEBUG] Traitement du syst√®me '${system.name}'`);
        console.log(`[ROLE DEBUG] Recherche du r√¥le ID: ${system.targetRole}`);
        
        const role = guild.roles.cache.get(system.targetRole);
        if (!role) {
          console.error(`[ROLE DEBUG] ‚ùå R√¥le ${system.targetRole} introuvable pour le syst√®me ${system.name}`);
          continue;
        }

        console.log(`[ROLE DEBUG] ‚úÖ R√¥le trouv√©: ${role.name} (${role.id})`);

        // V√©rifier si l'utilisateur a d√©j√† le r√¥le
        if (member.roles.cache.has(system.targetRole)) {
          console.log(`[ROLE DEBUG] ‚ö†Ô∏è L'utilisateur ${user.tag} a d√©j√† le r√¥le ${role.name}`);
          continue;
        }

        // V√©rifier les permissions du bot
        const botMember = guild.members.me;
        if (!botMember.permissions.has('ManageRoles')) {
          console.error(`[ROLE DEBUG] ‚ùå Le bot n'a pas la permission "G√©rer les r√¥les"`);
          continue;
        }

        // V√©rifier la hi√©rarchie des r√¥les
        if (role.position >= botMember.roles.highest.position) {
          console.error(`[ROLE DEBUG] ‚ùå Le r√¥le ${role.name} est trop haut dans la hi√©rarchie`);
          continue;
        }

        // Attribuer le r√¥le
        console.log(`[ROLE DEBUG] üé≠ Attribution du r√¥le ${role.name} √† ${user.tag}...`);
        await member.roles.add(role, `Attribution automatique via le syst√®me "${system.name}"`);
        console.log(`[ROLE DEBUG] ‚úÖ R√¥le ${role.name} attribu√© avec succ√®s √† ${user.tag}`);

        // Log optionnel
        const logChannel = guildSettings.logChannelID;
        if (logChannel) {
          const channel = guild.channels.cache.get(logChannel);
          if (channel?.isTextBased?.()) {
            const embed = new EmbedBuilder()
              .setColor('#00FF00')
              .setTitle('üé≠ Attribution de R√¥le Automatique')
              .setDescription(`**Utilisateur:** ${user}\n**R√¥le:** ${role}\n**Syst√®me:** ${system.name}\n**Condition:** ${system.condition}`)
              .setTimestamp();
            
            try {
              await channel.send({ embeds: [embed] });
              console.log(`[ROLE DEBUG] üìù Log envoy√© dans ${channel.name}`);
            } catch (logError) {
              console.error(`[ROLE DEBUG] ‚ùå Erreur envoi log:`, logError);
            }
          }
        }

      } catch (error) {
        console.error(`[ROLE DEBUG] ‚ùå Erreur lors de l'attribution du r√¥le ${system.name}:`, error);
        console.error(`[ROLE DEBUG] Stack trace:`, error.stack);
      }
    }

  } catch (error) {
    console.error('[ROLE DEBUG] ‚ùå Erreur globale dans handleRoleAssignment:', error);
    console.error('[ROLE DEBUG] Stack trace:', error.stack);
  }
}

// Commande pour cr√©er un message avec bouton d'acceptation
export async function createRuleAcceptanceMessage(message, args) {
  try {
    if (!message.member.permissions.has(PermissionsBitField.Flags.Administrator)) {
      return message.reply('‚ùå Seuls les administrateurs peuvent utiliser cette commande.');
    }

    const guildSettings = await getGuildSettings(message.guild.id);
    const roleSystem = guildSettings?.roleAssignmentSystems?.find(s => s.condition === 'button_click');

    if (!roleSystem) {
      return message.reply('‚ùå Aucun syst√®me de r√¥le par bouton configur√©. Configurez-le depuis le dashboard.');
    }

    const embed = new EmbedBuilder()
      .setColor('#0099FF')
      .setTitle('üìã R√®glement du Serveur')
      .setDescription('Veuillez lire attentivement le r√®glement ci-dessous.\n\nEn cliquant sur "‚úÖ J\'accepte", vous confirmez avoir lu et accept√© les r√®gles de ce serveur.')
      .addFields([
        {
          name: 'üìñ R√®gles Principales',
          value: '‚Ä¢ Respectez tous les membres\n‚Ä¢ Pas de spam ou de contenu inappropri√©\n‚Ä¢ Utilisez les bons salons\n‚Ä¢ Suivez les instructions des mod√©rateurs',
          inline: false
        }
      ])
      .setFooter({ text: 'Cliquez sur le bouton ci-dessous pour accepter' })
      .setTimestamp();

    const row = new ActionRowBuilder()
      .addComponents(
        new ButtonBuilder()
          .setCustomId('accept_rules')
          .setLabel('‚úÖ J\'accepte le r√®glement')
          .setStyle(ButtonStyle.Success),
        new ButtonBuilder()
          .setCustomId('decline_rules')
          .setLabel('‚ùå Je refuse')
          .setStyle(ButtonStyle.Danger)
      );

    await message.channel.send({ embeds: [embed], components: [row] });
    await message.delete();

    return true;
  } catch (error) {
    console.error('Erreur createRuleAcceptanceMessage:', error);
    return false;
  }
}

// ‚úÖ FONCTION MANQUANTE AJOUT√âE
// Commande pour configurer les syst√®mes de r√¥les
export async function configureRoleSystem(message, args) {
  try {
    if (!message.member.permissions.has(PermissionsBitField.Flags.Administrator)) {
      return message.reply('‚ùå Seuls les administrateurs peuvent utiliser cette commande.');
    }

    const embed = new EmbedBuilder()
      .setColor('#7289DA')
      .setTitle('‚öôÔ∏è Configuration des Syst√®mes de R√¥les')
      .setDescription('Pour configurer les syst√®mes d\'attribution de r√¥les, rendez-vous sur le **Dashboard Web** de votre serveur.\n\nVous pourrez y cr√©er et g√©rer plusieurs syst√®mes avec diff√©rentes conditions.')
      .addFields([
        {
          name: 'üåê Dashboard',
          value: `Acc√©dez au dashboard pour configurer vos syst√®mes de r√¥les avec une interface intuitive.`,
          inline: false
        },
        {
          name: 'üé≠ Types de Syst√®mes Disponibles',
          value: '‚Ä¢ **Arriv√©e** - R√¥le automatique √† l\'arriv√©e\n‚Ä¢ **R√©action** - R√¥le via r√©action sur un message\n‚Ä¢ **Bouton** - R√¥le via clic sur un bouton\n‚Ä¢ **Commande** - R√¥le via commande sp√©cifique',
          inline: false
        }
      ]);

    await message.reply({ embeds: [embed] });
    return true;
  } catch (error) {
    console.error('Erreur configureRoleSystem:', error);
    return false;
  }
}

// ‚úÖ EXPORT MANQUANT AJOUT√â
export const roleAssignmentHelp = {
  name: 'üé≠ Attribution de R√¥les',
  value: '`[prefix]role-config` ‚Äî Configuration des syst√®mes de r√¥les\n`[prefix]create-rules` ‚Äî Cr√©e un message d\'acceptation du r√®glement\n`[prefix]test-reaction` ‚Äî Cr√©e un message de test pour les r√©actions'
};