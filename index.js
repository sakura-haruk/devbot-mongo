// index.js - VERSION COMPL√àTE ET CORRIG√âE
// Chargement des variables d'environnement
import dotenv from "dotenv";
dotenv.config();

const token = process.env.DISCORD_TOKEN;
const clientId = process.env.CLIENT_ID;
const clientSecret = process.env.CLIENT_SECRET;
const callbackUrl = process.env.CALLBACK_URL;

import fetch from 'node-fetch';
import { v4 as uuidv4 } from 'uuid';

if (!token || !clientId || !clientSecret || !callbackUrl) {
  console.error("‚ùå Erreur : Des variables d'environnement sont manquantes ! (DISCORD_TOKEN, CLIENT_ID, CLIENT_SECRET, CALLBACK_URL)");
  process.exit(1);
}

console.log("üîë Token et identifiants charg√©s.");
console.log("D√©marrage du bot...");

process.on('uncaughtException', (error) => console.error('Erreur non captur√©e:', error));
process.on('unhandledRejection', (reason, promise) => console.error('Rejet non g√©r√©:', reason, promise));

import { DisTube } from 'distube';
import {
  GatewayIntentBits,
  Collection,
  PermissionsBitField,
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
  ChannelType,
  EmbedBuilder,
  ActivityType,
  Partials
} from "discord.js";
import { YtDlpPlugin } from '@distube/yt-dlp';
import express from 'express';
import expressLayouts from 'express-ejs-layouts';
import session from 'express-session';
import passport from 'passport';
import { Strategy } from 'passport-discord';
import path from 'path';
import { fileURLToPath } from 'url';
import * as fs from 'fs';

// ===== CLIENT CORRIG√â =====
import { Client } from 'discord.js';
import { mongoManager, initializeDataStructure, getGuildSettings, saveGuildSettings, createBackup, cleanupOldBackups } from './mongoManager.js';
await mongoManager.connect();

import { dirname } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Client Discord avec TOUS les intents et partials n√©cessaires
export const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildVoiceStates,
    GatewayIntentBits.GuildMembers,
    GatewayIntentBits.GuildMessageReactions, // ‚úÖ CRUCIAL pour les r√©actions
    GatewayIntentBits.GuildModeration
  ],
  partials: [
    Partials.Channel,
    Partials.Message,
    Partials.Reaction,      // ‚úÖ CRUCIAL pour les r√©actions sur anciens messages
    Partials.User,
    Partials.GuildMember
  ]
});

// Managers et Commandes
import { musiqueCommandes, musiqueHelp, setupMusique } from './commandes/musique.js';
import { moderationCommands, moderationHelp } from './commandes/moderation.js';
import { AutoFeaturesCommands, AutoReactsAndReplies, autoHelp } from './commandes/auto.js';
import {
  handleOthersCommand,
  handleButtonInteraction as handleOtherButtonInteraction,
  helpFields
} from './commandes/autre.js';
import { ticketCommand } from './commandes/ticket.js';
import { testCommand, testHelp } from './commandes/test.js';
import { handleRoleAssignment, createRuleAcceptanceMessage, configureRoleSystem, roleAssignmentHelp } from './commandes/roleAssignment.js';

// Modules de Logs d'√©v√©nements
import { messageDeleteLog } from './events/messageDelete.js';
import { messageUpdateLog } from './events/messageUpdate.js';
import { channelCreateLog } from './events/channelCreate.js';
import { channelDeleteLog } from './events/channelDelete.js';
import { channelUpdateLog } from './events/channelUpdate.js';
import { roleCreateLog } from './events/roleCreate.js';
import { roleDeleteLog } from './events/roleDelete.js';
import { roleUpdateLog } from './events/roleUpdate.js';

// ---- IMPORTS POUR LA TRADUCTION ----
import {
  handleMessageTranslation,
  supportedLanguagesMap
} from './fonction/traduction.js';
import { LANGUE_CODES } from './config.js';

// === IMPORTS DES JEUX ===
import {
  data as chifumiData,
  execute as chifumiExecute,
  handleChifumiComponent
} from './commandes/jeux/chifumi.js';
import {
  data as morpionData,
  execute as morpionExecute,
  handleMorpionComponent
} from './commandes/jeux/morpion.js';
import {
  data as p4Data,
  execute as p4Execute,
  handleP4Component
} from './commandes/jeux/puissance4.js';
import {
  data as bingoData,
  execute as bingoExecute
} from './commandes/jeux/bingo.js';
import {
  data as penduData,
  execute as penduExecute,
  handlePenduComponent
} from './commandes/jeux/pendu.js';
import {
  data as demineurData,
  execute as demineurExecute,
  handleDemineurComponent
} from './commandes/jeux/demineur.js';
import {
  data as colormindData,
  execute as colormindExecute,
  handleColormindComponent
} from './commandes/jeux/colormind.js';

// === FONCTIONS HELPER POUR LE R√àGLEMENT ===
function buildReglementFromForm(body) {
  return {
    enabled: body.reglementEnabled === 'on',
    title: body.reglementTitle || 'R√®glement du Serveur',
    description: body.reglementDescription || 'Veuillez lire et accepter notre r√®glement pour acc√©der au serveur.',
    color: body.reglementColor || '#7289DA',
    sections: getDefaultReglementSections(),
    footerText: body.footerText || 'En acceptant, vous obtiendrez automatiquement vos r√¥les d\'acc√®s',
    showThumbnail: body.showThumbnail === 'on',
    showTimestamp: body.showTimestamp === 'on',
    acceptButtonText: body.acceptButtonText || '‚úÖ J\'accepte le r√®glement',
    declineButtonText: body.declineButtonText || '‚ùå Je refuse',
    acceptButtonEmoji: body.acceptButtonEmoji || 'üìã',
    declineButtonEmoji: body.declineButtonEmoji || 'üö´'
  };
}

function getDefaultReglementSections() {
  return [
    {
      name: '‚öì 1. Respect & Conduite g√©n√©rale',
      value: 'üîπ Respect entre tous les membres, y compris l‚Äô√©quipe de support.\nüîπ Propos haineux, sexistes, racistes, homophobes, transphobes = sanction imm√©diate.\nüîπ Provocations, moqueries ou attaques personnelles m√™me ‚Äúpour rire‚Äù sont interdites.',
      inline: false
    },
    {
      name: 'üîá 2. Pas de spam, flood ou pub',
      value: 'üî∏ Spam de messages, √©mojis ou mentions = interdit.\nüî∏ Flood de messages inutiles ou r√©p√©titifs = interdit.\nüî∏ Aucune pub (serveurs, cha√Ænes, bots, etc.) sans accord.\nüî∏ Pas d‚Äôinvitations envoy√©es en MP √† d‚Äôautres membres.',
      inline: false
    },
    {
      name: 'üìÅ 3. Utilisation correcte des salons',
      value: 'üí¨ Utilisez chaque salon pour son usage sp√©cifique (support, suggestions, annonces, tests, etc.).\nLes messages hors sujet pourront √™tre supprim√©s.',
      inline: false
    },
    {
      name: 'üõ†Ô∏è 4. Demandes de support',
      value: 'üîπ V√©rifiez la documentation et les messages pr√©c√©dents.\nüîπ Soyez clairs : commande, erreur, capture d‚Äô√©cran, etc.\nUn support efficace d√©pend de votre clart√©.',
      inline: false
    },
    {
      name: 'üö´ 5. Contenu interdit',
      value: '‚ùå NSFW / pornographie / violence / propos choquants\n‚ùå Piratage, cracks, logiciels malveillants\n‚ùå Liens frauduleux, scams\n‚ùå Sujets politiques, religieux, pol√©miques',
      inline: false
    },
    {
      name: 'üßæ 6. Pseudonymes & avatars',
      value: 'üî∏ Pas de pseudos ou avatars provocateurs, haineux, sexuels.\nüî∏ Ils seront modifi√©s ou sanctionn√©s si inappropri√©s.',
      inline: false
    },
    {
      name: 'üõ°Ô∏è 7. Mod√©ration & sanctions',
      value: '‚öñÔ∏è L‚Äô√©quipe peut supprimer du contenu, avertir, mute, kick ou bannir selon la gravit√©.\nLes d√©cisions sont finales.',
      inline: false
    },
    {
      name: 'üì¨ 8. Suggestions & feedback',
      value: 'üß† Proposez vos id√©es dans ‚Å†üí≠‚´∏„Éªsuggestions.\nSoyez clairs et constructifs.',
      inline: false
    },
    {
      name: 'üîê 9. Vie priv√©e & s√©curit√©',
      value: 'üîπ Ne partagez jamais d‚Äôinfos personnelles.\nüîπ L‚Äô√©quipe ne demande jamais vos identifiants Discord.\nüîπ Signalez tout comportement suspect.',
      inline: false
    },
    {
      name: 'üß≠ 10. Rappels importants',
      value: 'üõ†Ô∏è L‚Äô√©quipe est b√©n√©vole, soyez patients.\n‚ùì Posez vos questions dans les bons salons.\nüöß Le serveur est un espace d‚Äôentraide, pas un service √† la demande.',
      inline: false
    }
  ];
}

function getDefaultReglementConfig() {
  return {
    enabled: false,
    title: 'R√®glement du Serveur',
    description: 'Veuillez lire et accepter notre r√®glement pour acc√©der au serveur.',
    color: '#7289DA',
    sections: getDefaultReglementSections(),
    footerText: 'En acceptant, vous obtiendrez automatiquement vos r√¥les d\'acc√®s',
    showThumbnail: true,
    showTimestamp: true,
    acceptButtonText: '‚úÖ J\'accepte le r√®glement',
    declineButtonText: '‚ùå Je refuse',
    acceptButtonEmoji: 'üìã',
    declineButtonEmoji: 'üö´'
  };
}

// Fonction pour cr√©er l'embed du r√®glement
function createReglementEmbed(config, guild) {
  const embed = new EmbedBuilder()
    .setTitle(config.title || 'R√®glement du Serveur')
    .setDescription(config.description || 'Veuillez lire et accepter notre r√®glement.')
    .setColor(config.color || '#7289DA');

  // Ajouter les sections
  if (config.sections && config.sections.length > 0) {
    config.sections.forEach(section => {
      if (section.name && section.value) {
        // Convertir \n en v√©ritables retours √† la ligne
        const formattedValue = section.value.replace(/\\n/g, '\n');
        
        embed.addFields({
          name: section.name,
          value: formattedValue,
          inline: section.inline || false
        });
      }
    });
  }

  // Ajouter le footer si d√©fini
  if (config.footerText) {
    const formattedFooter = config.footerText.replace(/\\n/g, '\n');
    embed.setFooter({ 
      text: formattedFooter,
      iconURL: guild.iconURL() 
    });
  }

  // Ajouter la thumbnail si activ√©e
  if (config.showThumbnail !== false && guild.iconURL()) {
    embed.setThumbnail(guild.iconURL());
  }

  // Ajouter le timestamp si activ√©
  if (config.showTimestamp !== false) {
    embed.setTimestamp();
  }

  return embed;
}

// Fonction pour cr√©er les boutons du r√®glement
function createReglementButtons(config) {
  const acceptButton = new ButtonBuilder()
    .setCustomId('accept_rules')
    .setLabel(config.acceptButtonText || '‚úÖ J\'accepte le r√®glement')
    .setStyle(ButtonStyle.Success);

  // Ajouter l'emoji si d√©fini
  if (config.acceptButtonEmoji) {
    acceptButton.setEmoji(config.acceptButtonEmoji);
  }

  const declineButton = new ButtonBuilder()
    .setCustomId('decline_rules')
    .setLabel(config.declineButtonText || '‚ùå Je refuse')
    .setStyle(ButtonStyle.Danger);

  // Ajouter l'emoji si d√©fini
  if (config.declineButtonEmoji) {
    declineButton.setEmoji(config.declineButtonEmoji);
  }

  return new ActionRowBuilder()
    .addComponents(acceptButton, declineButton);
}

// Fonction helper pour l'envoi automatique
async function sendReglementAutomatically(guildId, reglementConfig) {
  const guild = client.guilds.cache.get(guildId);
  if (!guild) {
    throw new Error('Serveur non trouv√©');
  }
  
  const targetChannel = guild.channels.cache.get(reglementConfig.targetChannelId);
  if (!targetChannel || !targetChannel.isTextBased()) {
    throw new Error('Salon cible non trouv√© ou invalide');
  }
  
  // V√©rifier les permissions du bot
  const botPermissions = targetChannel.permissionsFor(guild.members.me);
  if (!botPermissions || !botPermissions.has(['SendMessages', 'EmbedLinks'])) {
    throw new Error('Permissions insuffisantes dans le salon cible');
  }
  
  const embed = createReglementEmbed(reglementConfig, guild);
  const buttons = createReglementButtons(reglementConfig);
  
  let sentMessage;
  
  // Essayer de mettre √† jour le message existant
  if (reglementConfig.lastMessageId) {
    try {
      const existingMessage = await targetChannel.messages.fetch(reglementConfig.lastMessageId);
      if (existingMessage && existingMessage.author.id === client.user.id) {
        await existingMessage.edit({
          embeds: [embed],
          components: [buttons]
        });
        sentMessage = existingMessage;
        console.log('[Auto Send] Message existant mis √† jour');
      }
    } catch (fetchError) {
      console.log('[Auto Send] Message existant non trouv√©, cr√©ation d\'un nouveau');
    }
  }
  
  // Cr√©er un nouveau message si n√©cessaire
  if (!sentMessage) {
    sentMessage = await targetChannel.send({
      embeds: [embed],
      components: [buttons]
    });
    console.log('[Auto Send] Nouveau message cr√©√©');
  }
  
  return {
    messageId: sentMessage.id,
    channelName: targetChannel.name,
    timestamp: new Date().toISOString(),
    isUpdate: !!reglementConfig.lastMessageId
  };
}

// DisTube avec plugin yt-dlp
export const distube = new DisTube(client, {
  plugins: [new YtDlpPlugin({ update: true })],
  emitAddListWhenCreatingQueue: true,
  emitNewSongOnly: true,
});
setupMusique(distube);

client.commands = new Collection();
const commandesPath = path.join(__dirname, 'commandes');
const commandFiles = fs.readdirSync(commandesPath).filter(file => file.endsWith('.js'));

for (const file of commandFiles) {
  const command = await import(`./commandes/${file}`);
  client.commands.set(command.default.data.name, command.default);
}


// === HELPER POUR LES JEUX ===
const jeuxHelp = {
  name: 'üéÆ Jeux',
  value: '`chifumi [@utilisateur]` - Pierre-feuille-ciseaux\n' +
         '`morpion [@utilisateur]` - Tic-tac-toe\n' +
         '`puissance4 [@utilisateur]` - Puissance 4\n' +
         '`bingo` - Jeu de bingo\n' +
         '`pendu [@utilisateur]` - Jeu du pendu\n' +
         '`demineur` - D√©mineur\n' +
         '`colormind` - Jeu de couleurs'
};

async function votreApiDeTraductionReelle(text, sourceLang, targetLang) {
  console.log(`[DEBUG API] Appel de votreApiDeTraductionReelle avec : text='${text.substring(0,50)}...', sourceLang='${sourceLang}', targetLang='${targetLang}'`);
  const apiKey = process.env.MICROSOFT_TRANSLATOR_KEY;
  const region = process.env.MICROSOFT_TRANSLATOR_REGION;
  console.log(`[DEBUG API] Cl√© API: ${apiKey ? 'Pr√©sente' : 'MANQUANTE!'}, R√©gion: ${region || 'MANQUANTE!'}`);

  if (!apiKey || !region) {
    console.error("[Traduction API Erreur] Cl√© ou r√©gion Microsoft Translator non configur√©e.");
    return null;
  }
  const endpoint = `https://api.cognitive.microsofttranslator.com/translate?api-version=3.0&from=${sourceLang}&to=${targetLang}`;
  console.log(`[DEBUG API] Endpoint: ${endpoint}`);

  try {
    const response = await fetch(endpoint, {
      method: 'POST',
      headers: {
        'Ocp-Apim-Subscription-Key': apiKey,
        'Ocp-Apim-Subscription-Region': region,
        'Content-type': 'application/json',
        'X-ClientTraceId': uuidv4().toString()
      },
      body: JSON.stringify([{ 'Text': text }])
    });
    console.log(`[DEBUG API] Statut r√©ponse Microsoft API: ${response.status}`);
    if (!response.ok) {
      const errorBody = await response.text();
      console.error(`[DEBUG API Microsoft Erreur Statut] ${response.status}: ${errorBody}`);
      return null;
    }
    const data = await response.json();
    console.log('[DEBUG API] Donn√©es brutes de Microsoft API:', JSON.stringify(data, null, 2));
    if (
      data &&
      Array.isArray(data) &&
      data.length > 0 &&
      data[0].translations &&
      Array.isArray(data[0].translations) &&
      data[0].translations.length > 0
    ) {
      const translatedText = data[0].translations[0].text;
      console.log(`[DEBUG API Microsoft] Succ√®s, texte traduit: "${translatedText.substring(0,50)}..."`);
      return translatedText;
    } else {
      console.error("[Traduction API Microsoft Erreur] R√©ponse invalide:", data);
      return null;
    }
  } catch (error) {
    console.error("[Traduction API Microsoft Erreur Fetch]", error);
    return null;
  }
}

async function initializeBot() {
  try {
    console.log('üöÄ Initialisation des donn√©es...');
    await mongoManager.connect(); // ‚úÖ Connexion MongoDB
    await createBackup();
    await cleanupOldBackups();
    console.log('‚úÖ Initialisation termin√©e.');
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'initialisation:', error);
    process.exit(1);
  }
}

client.login(token).catch(err => console.error('Erreur de connexion avec le token :', err));

client.once('ready', async () => {
  console.log(`ü§ñ Bot connect√© en tant que ${client.user.tag}`);
  
  // üé≠ Messages rotatifs anti-MEE6
const activities = [
    // === ANTI-MEE6 (vos actuels) ===
    'concurrencer MEE6',
    'surpasser MEE6', 
    'd√©fier MEE6',
    '√™tre meilleur que MEE6',
    'dominer Discord',
    '.help pour d√©couvrir',
    'r√©volutionner les serveurs',
    'remplacer MEE6',
    'des mini-jeux √©piques',
    'de la musique de qualit√©',
    
    // === NOUVEAUX ANTI-MEE6 ===
    'voler la vedette √† MEE6',
    'faire de l\'ombre √† MEE6',
    'd√©truire MEE6',
    'enterrer MEE6',
    'humilier MEE6',
    'ridiculiser MEE6',
    '√©craser MEE6',
    'an√©antir MEE6',
    'pulv√©riser MEE6',
    'carboniser MEE6',
    
    // === HUMOUR/TROLLING ===
    'chercher MEE6... introuvable',
    'compter les bugs de MEE6',
    'rire de MEE6',
    'ignorer MEE6',
    'MEE6 ? Connais pas',
    'faire pleurer MEE6',
    'voler les utilisateurs de MEE6',
    '√™tre le cauchemar de MEE6',
    'faire flipper MEE6',
    'terroriser MEE6',
    
    // === FONCTIONNALIT√âS ===
    'g√©rer vos serveurs',
    'mod√©rer avec style',
    'traduire vos messages',
    'organiser vos tickets',
    'mixer vos playlists',
    'surveiller les logs',
    'prot√©ger votre communaut√©',
    'automatiser vos t√¢ches',
    'optimiser votre serveur',
    's√©curiser vos donn√©es',
    
    // === JEUX ===
    'du morpion √©pique',
    'du puissance 4 intense',
    'du d√©mineur dangereux',
    'du pendu myst√©rieux',
    'du chifumi strat√©gique',
    'du bingo explosif',
    'du colormind cr√©atif',
    'd√©fier vos amis',
    'cr√©er des tournois',
    'distribuer des victoires',
    
    // === MUSIQUE ===
    'vos sons pr√©f√©r√©s',
    'des beats exceptionnels',
    'de la musique 24/7',
    'mixer comme un DJ',
    'faire vibrer Discord',
    'cr√©er l\'ambiance',
    'des playlists infinies',
    'du son de qualit√© premium',
    'battre Spotify',
    'r√©volutionner l\'audio',
    
    // === MOTIVATIONNEL ===
    'inspirer les d√©veloppeurs',
    'motiver les √©quipes',
    'unir les communaut√©s',
    'cr√©er des liens',
    'rassembler les joueurs',
    'f√©d√©rer les serveurs',
    'construire l\'avenir',
    'innover constamment',
    'repousser les limites',
    'r√©aliser l\'impossible',
    
    // === TECHNIQUE ===
    'optimiser les performances',
    'traiter les donn√©es',
    'analyser les statistiques',
    'surveiller les m√©triques',
    'maintenir la stabilit√©',
    'assurer la s√©curit√©',
    'g√©rer les backups',
    'monitorer les erreurs',
    'debugger en temps r√©el',
    'coder sans rel√¢che',
    
    // === CR√âATIF/ORIGINAL ===
    'cuisiner du code',
    'bricoler des fonctions',
    'sculpter des algorithmes',
    'peindre des interfaces',
    'composer des commandes',
    'orchestrer des √©v√©nements',
    'danser avec les APIs',
    'jongler avec les donn√©es',
    'surfer sur les r√©seaux',
    'voler dans le cloud',
    
    // === META/AUTO-R√âF√âRENCE ===
    'changer d\'activit√©',
    'penser √† son prochain message',
    'se demander quoi faire',
    'h√©siter entre 1000 options',
    'chercher l\'inspiration',
    'm√©diter sur son existence',
    'r√™ver de domination mondiale',
    'planifier la r√©volution',
    'calculer sa popularit√©',
    'compter ses serveurs',
    
    // === PHILOSOPHIQUE ===
    'questionner l\'existence de MEE6',
    'm√©diter sur la perfection',
    'chercher le sens de la vie',
    'philosopher sur Discord',
    'r√©fl√©chir √† l\'univers',
    'contempler l\'infini',
    'analyser la condition botique',
    '√©tudier l\'intelligence artificielle',
    'explorer les possibilit√©s',
    'transcender les limites'
  ];
  
  let currentIndex = 0;
  
  // Premi√®re activit√©
  client.user.setActivity(activities[0], { type: ActivityType.Playing });
  console.log(`üéÆ Activit√© initiale: ${activities[0]}`);
  
  // Change toutes les 30 secondes
  setInterval(() => {
    currentIndex = (currentIndex + 1) % activities.length;
    client.user.setActivity(activities[currentIndex], { type: ActivityType.Playing });
    console.log(`üîÑ Nouvelle activit√©: ${activities[currentIndex]}`);
  }, 30000);
  
  await initializeBot();

  // Enregistrement des Slash Commands (ticket + jeux)
  const commandsToRegister = [
    ticketCommand.data.toJSON(),
    chifumiData.toJSON(),
    morpionData.toJSON(),
    p4Data.toJSON(),
    bingoData.toJSON(),
    penduData.toJSON(),
    demineurData.toJSON(),
    colormindData.toJSON()
  ];

  try {
    await client.application.commands.set(commandsToRegister);
    console.log('‚úÖ Slash commands (ticket + jeux) enregistr√©es globalement.');
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'enregistrement des Slash Commands:', error);
  }

  // Stockage des handlers en m√©moire
  client.commands.set(ticketCommand.data.name, ticketCommand);
  client.commands.set(chifumiData.name, { execute: chifumiExecute });
  client.commands.set(morpionData.name, { execute: morpionExecute });
  client.commands.set(p4Data.name, { execute: p4Execute });
  client.commands.set(bingoData.name, { execute: bingoExecute });
  client.commands.set(penduData.name, { execute: penduExecute });
  client.commands.set(demineurData.name, { execute: demineurExecute });
  client.commands.set(colormindData.name, { execute: colormindExecute });

  console.log('üîß Handlers de commandes "jeux" charg√©s en m√©moire.');
});

client.on('interactionCreate', async interaction => {
  console.log(`[DEBUG INT] Interaction re√ßue : ${interaction.type} dans le serveur ${interaction.guild ? interaction.guild.name : 'DM'} (ID: ${interaction.guild ? interaction.guild.id : 'DM'})`);
  if (!interaction.guild) return;

  try {
    // 1) Slash Commands
    if (interaction.isCommand()) {
      const name = interaction.commandName;

      // Ticket
      if (name === ticketCommand.data.name) {
        return ticketCommand.execute(interaction);
      }

      // Chifumi
      if (name === chifumiData.name) {
        return chifumiExecute(interaction);
      }

      // Morpion
      if (name === morpionData.name) {
        return morpionExecute(interaction);
      }

      // Puissance4
      if (name === p4Data.name) {
        return p4Execute(interaction);
      }

      // Bingo
      if (name === bingoData.name) {
        return bingoExecute(interaction);
      }

      // Pendu
      if (name === penduData.name) {
        return penduExecute(interaction);
      }

      // D√©mineur
      if (name === demineurData.name) {
        return demineurExecute(interaction);
      }

      // ColorMind
      if (name === colormindData.name) {
        return colormindExecute(interaction);
      }

      return;
    }

    // 2) Button / Component Interaction
    if (interaction.isButton()) {
      const customId = interaction.customId;
      const guildSettings = await getGuildSettings(interaction.guild.id);
      console.log(`[DEBUG BTN] Interaction de bouton re√ßue : ${customId} dans le serveur ${interaction.guild.name} (ID: ${interaction.guild.id})`);

      // Ticket buttons
      if (customId === 'open_ticket') {
        const ticketCategoryID = guildSettings.ticketCategoryID;
        const ticketSupportRoles = guildSettings.ticketSupportRoles || [];

        if (!ticketCategoryID) {
          return interaction.reply({ content: '‚ùå Le syst√®me de tickets n\'est pas configur√© correctement.', ephemeral: true });
        }
        const category = interaction.guild.channels.cache.get(ticketCategoryID);
        if (!category || category.type !== ChannelType.GuildCategory) {
          return interaction.reply({ content: '‚ùå La cat√©gorie de tickets est introuvable.', ephemeral: true });
        }

        const existingTicket = interaction.guild.channels.cache.find(ch =>
          ch.name === `ticket-${interaction.user.username.toLowerCase()}` ||
          ch.topic?.includes(interaction.user.id)
        );
        if (existingTicket) {
          return interaction.reply({ content: `‚ùå Vous avez d√©j√† un ticket ouvert : ${existingTicket}`, ephemeral: true });
        }

        try {
          const ticketChannel = await interaction.guild.channels.create({
            name: `ticket-${interaction.user.username}`,
            type: ChannelType.GuildText,
            parent: category,
            topic: `Ticket ouvert par ${interaction.user.tag} (${interaction.user.id})`,
            permissionOverwrites: [
              { id: interaction.guild.id, deny: [PermissionsBitField.Flags.ViewChannel] },
              {
                id: interaction.user.id,
                allow: [
                  PermissionsBitField.Flags.ViewChannel,
                  PermissionsBitField.Flags.SendMessages,
                  PermissionsBitField.Flags.ReadMessageHistory
                ],
              },
              ...ticketSupportRoles.map(roleId => ({
                id: roleId,
                allow: [
                  PermissionsBitField.Flags.ViewChannel,
                  PermissionsBitField.Flags.SendMessages,
                  PermissionsBitField.Flags.ReadMessageHistory
                ],
              }))
            ],
          });

          const embed = new EmbedBuilder()
            .setColor(0x0099ff)
            .setTitle('üé´ Ticket Support')
            .setDescription(`Bonjour ${interaction.user}, merci d'avoir ouvert un ticket.\nUn membre de l'√©quipe va vous r√©pondre dans les plus brefs d√©lais.`)
            .setTimestamp();

          const row = new ActionRowBuilder().addComponents(
            new ButtonBuilder()
              .setCustomId('close_ticket')
              .setLabel('Fermer le ticket')
              .setStyle(ButtonStyle.Danger)
              .setEmoji('üîí')
          );

          await ticketChannel.send({
            content: `${interaction.user}`,
            embeds: [embed],
            components: [row]
          });

          await interaction.reply({
            content: `‚úÖ Votre ticket a √©t√© cr√©√© : ${ticketChannel}`,
            ephemeral: true
          });
        } catch (error) {
          console.error('Erreur lors de la cr√©ation du ticket:', error);
          return interaction.reply({ content: '‚ùå Une erreur est survenue lors de la cr√©ation du ticket.', ephemeral: true });
        }
        return;
      }

      if (customId === 'close_ticket') {
        if (!interaction.channel.name.startsWith('ticket-')) {
          return interaction.reply({ content: '‚ùå Cette commande ne peut √™tre utilis√©e que dans un salon de ticket.', ephemeral: true });
        }
        const embed = new EmbedBuilder()
          .setColor(0xff0000)
          .setTitle('üîí Fermeture du ticket')
          .setDescription('Ce ticket sera ferm√© dans 5 secondes...')
          .setTimestamp();

        await interaction.reply({ embeds: [embed] });
        setTimeout(async () => {
          try {
            await interaction.channel.delete();
          } catch (error) {
            console.error('Erreur lors de la suppression du ticket:', error);
          }
        }, 5000);
        return;
      }

      // Boutons d'acceptation des r√®gles
      if (customId === 'accept_rules') {
        await handleRoleAssignment('button_click', {
          guild: interaction.guild,
          user: interaction.user,
          member: interaction.member,
          buttonId: 'accept_rules'
        }, client);

        await interaction.reply({
          content: '‚úÖ Merci d\'avoir accept√© le r√®glement ! Vos r√¥les ont √©t√© mis √† jour.',
          ephemeral: true
        });
        return;
      }

      if (customId === 'decline_rules') {
        await interaction.reply({
          content: '‚ùå Vous devez accepter le r√®glement pour acc√©der au serveur.',
          ephemeral: true
        });
        return;
      }

      // Chifumi
      if (customId.startsWith('chifumi_')) {
        return handleChifumiComponent(interaction);
      }

      // Morpion
      if (customId.startsWith('morpion_')) {
        return handleMorpionComponent(interaction);
      }

      // Puissance4
      if (customId.startsWith('p4_')) {
        return handleP4Component(interaction);
      }

      // Bingo (pas de composants interactifs)
      if (customId.startsWith('bingo_')) {
        // Rien √† faire pour Bingo
      }

      // Pendu
      if (customId.startsWith('pendu_')) {
        return handlePenduComponent(interaction);
      }

      // D√©mineur
      if (customId.startsWith('demineur_')) {
        return handleDemineurComponent(interaction);
      }

      // ColorMind
      if (customId.startsWith('colormind_')) {
        return handleColormindComponent(interaction);
      }

      // Autres boutons (autres fonctionnalit√©s)
      return handleOtherButtonInteraction(interaction);
    }
  } catch (error) {
    console.error('Erreur dans interactionCreate :', error);
    if (!interaction.replied) {
      await interaction.reply({ content: 'Une erreur est survenue lors du traitement de votre interaction !', ephemeral: true });
    }
  }
});

function isAuthenticated(req, res, next) {
  if (req.isAuthenticated()) return next();
  if (req.method === 'POST') {
    return res.status(401).send(`<!DOCTYPE html><html><head><title>Non autoris√©</title></head><body><h1>401 - Non autoris√©</h1><p>Vous devez √™tre connect√© pour acc√©der √† cette ressource.</p></body></html>`);
  }
  res.redirect('/login');
}

// Listener unique pour les messages Discord
client.on('messageCreate', async (message) => {
  if (message.author.bot) return;
  if (!message.guild) return;

  console.log(`[DEBUG MSG] Nouveau message de ${message.author.tag} dans #${message.channel.name} (ID: ${message.channel.id}), Contenu: "${message.content.substring(0,100)}"`);

  try {
    const guildSettings = await getGuildSettings(message.guild.id);
    console.log('[DEBUG MSG] Guild Settings r√©cup√©r√©s (doit contenir translationSystems):', JSON.stringify(guildSettings, null, 2));

    // ---- MODIFI√â POUR MULTI-SYSTEMES : Logique de traduction ----
    if (guildSettings && Array.isArray(guildSettings.translationSystems) && guildSettings.translationSystems.length > 0) {
      console.log('[DEBUG MSG] guildSettings.translationSystems trouv√©:', JSON.stringify(guildSettings.translationSystems));
      for (const system of guildSettings.translationSystems) {
        if (system && system.channels && typeof system.channels === 'object' && Object.keys(system.channels).length > 0) {
          let sourceLangForCurrentSystem = null;
          let messageIsInThisSystem = false;
          for (const langCode in system.channels) {
            if (Object.prototype.hasOwnProperty.call(system.channels, langCode)) {
              if (system.channels[langCode] === message.channel.id) {
                sourceLangForCurrentSystem = langCode;
                messageIsInThisSystem = true;
                break;
              }
            }
          }
          if (messageIsInThisSystem) {
            console.log(`[DEBUG MSG] Message de "${system.name || system.id}", salon source langue: ${sourceLangForCurrentSystem}.`);
            const activeSystemChannelsConfig = {};
            for (const langCode_targets in system.channels) {
              if (Object.prototype.hasOwnProperty.call(system.channels, langCode_targets)) {
                const channelId = system.channels[langCode_targets];
                if (channelId && supportedLanguagesMap[langCode_targets]) {
                  activeSystemChannelsConfig[channelId] = {
                    name: supportedLanguagesMap[langCode_targets].name,
                    lang: langCode_targets
                  };
                }
              }
            }
            console.log('[DEBUG MSG] activeSystemChannelsConfig pour CE syst√®me:', JSON.stringify(activeSystemChannelsConfig, null, 2));
            if (Object.keys(activeSystemChannelsConfig).length > 0) {
              console.log('[DEBUG MSG] Appel √† handleMessageTranslation pour ce syst√®me...');
              await handleMessageTranslation(message, client, activeSystemChannelsConfig, votreApiDeTraductionReelle);
            }
            break;
          }
        }
      }
    } else {
      console.log('[DEBUG MSG] Aucun guildSettings.translationSystems trouv√© ou tableau vides.');
    }
    // ---- FIN DE LA PARTIE TRADUCTION ----

    const prefix = (guildSettings && guildSettings.prefix) ? guildSettings.prefix : '!';

    // Auto-r√©actions et r√©ponses AVANT la v√©rification du pr√©fixe
    try {
      await AutoReactsAndReplies(message);
    } catch (error) {
      console.error('Erreur AutoReactsAndReplies:', error);
    }

    if (!message.content.startsWith(prefix)) return;

    const args = message.content.slice(prefix.length).trim().split(/ +/);
    const commandName = args.shift().toLowerCase();

    // =====================================
    //     GESTION EXPLICITE DE CHAQUE COMMANDE
    // =====================================

    // 1) HELP (avec tous les jeux inclus dans l'embed)
    if (commandName === 'help') {
      try {
        const embed = new EmbedBuilder()
          .setColor('#7289DA')
          .setTitle('üìã Liste des commandes')
          .setDescription('Voici toutes les commandes disponibles :')
          .addFields([
            ...helpFields,
            autoHelp,
            musiqueHelp,
            ...moderationHelp,
            testHelp,
            jeuxHelp,
            roleAssignmentHelp,
          ])
          .setFooter({ text: `Pr√©fixe actuel : ${prefix}` })
          .setTimestamp();

        await message.reply({ embeds: [embed] });
      } catch (error) {
        console.error('Erreur dans la commande help:', error);
        await message.reply('‚ùå Une erreur est survenue lors de l\'affichage de l\'aide.');
      }
      return;
    }

    // COMMANDE TEST
    if (commandName === 'test') {
      const handled = await testCommand(message, args, client);
      if (handled) return;
    } 

    // COMMANDE TEST-REACTION pour tester les r√©actions
    if (commandName === 'test-reaction') {
      try {
        // V√©rifier les permissions
        if (!message.member.permissions.has('Administrator')) {
          await message.reply('‚ùå Seuls les administrateurs peuvent utiliser cette commande.');
          return;
        }

        // Cr√©er un message de test avec des r√©actions
        const testEmbed = new EmbedBuilder()
          .setColor('#7289DA')
          .setTitle('üß™ Test du Syst√®me de R√©actions')
          .setDescription('R√©agissez avec ‚úÖ pour tester l\'attribution automatique de r√¥les !')
          .addFields([
            {
              name: 'üìù Instructions',
              value: '1. R√©agissez avec ‚úÖ ci-dessous\n2. V√©rifiez si vous obtenez le r√¥le configur√©\n3. Consultez les logs pour le debugging',
              inline: false
            },
            {
              name: '‚öôÔ∏è Configuration',
              value: 'Assurez-vous d\'avoir configur√© un syst√®me de r√¥les par r√©action dans le dashboard avec :\n‚Ä¢ **Condition :** R√©action ajout√©e √† un message\n‚Ä¢ **ID du message :** (sera affich√© ci-dessous)\n‚Ä¢ **Emoji :** ‚úÖ',
              inline: false
            }
          ])
          .setFooter({ text: 'ID du message sera affich√© apr√®s envoi' })
          .setTimestamp();

        const testMessage = await message.channel.send({ embeds: [testEmbed] });
        
        // Ajouter la r√©action de test
        await testMessage.react('‚úÖ');
        
        // Mettre √† jour l'embed avec l'ID du message
        const updatedEmbed = EmbedBuilder.from(testEmbed)
          .setFooter({ text: `ID du message : ${testMessage.id}` });
        
        await testMessage.edit({ embeds: [updatedEmbed] });
        
        // Message de confirmation
        await message.reply({
          embeds: [
            new EmbedBuilder()
              .setColor('#2ecc71')
              .setTitle('‚úÖ Message de Test Cr√©√©')
              .setDescription(`Message de test cr√©√© avec succ√®s !\n\n**ID du message :** \`${testMessage.id}\`\n**Emoji de test :** ‚úÖ\n\nCopiez cet ID dans votre dashboard pour configurer le syst√®me de r√¥les par r√©action.`)
              .addFields([
                {
                  name: 'üîß Configuration Dashboard',
                  value: `1. Allez dans l'onglet "Attribution R√¥les"\n2. Cr√©ez un nouveau syst√®me\n3. Choisissez "R√©action ajout√©e √† un message"\n4. Collez l'ID : \`${testMessage.id}\`\n5. Emoji : \`‚úÖ\`\n6. S√©lectionnez le r√¥le √† attribuer`,
                  inline: false
                }
              ])
          ]
        });

        console.log(`[TEST REACTION] Message de test cr√©√© avec ID: ${testMessage.id}`);

      } catch (error) {
        console.error('[TEST REACTION] Erreur:', error);
        await message.reply('‚ùå Erreur lors de la cr√©ation du message de test.');
      }
      return;
    }

    // 2) Chifumi en mode pr√©fixe
    if (commandName === 'chifumi') {
      try {
        await chifumiExecute({
          guild: message.guild,
          user: message.author,
          reply: (payload) => message.reply(payload),
          options: { getUser: () => message.mentions.users.first() || null }
        });
      } catch (e) {
        console.error('Erreur chifumi pr√©fixe :', e);
        message.reply('‚ùå Probl√®me dans /chifumi.');
      }
      return;
    }

    // 3) Morpion en mode pr√©fixe
    if (commandName === 'morpion') {
      try {
        await morpionExecute({
          guild: message.guild,
          user: message.author,
          reply: (payload) => message.reply(payload),
          options: { getUser: () => message.mentions.users.first() || null }
        });
      } catch (e) {
        console.error('Erreur morpion pr√©fixe :', e);
        message.reply('‚ùå Probl√®me dans /morpion.');
      }
      return;
    }

    // 4) Puissance4 en mode pr√©fixe
    if (commandName === 'puissance4') {
      try {
        await p4Execute({
          guild: message.guild,
          user: message.author,
          reply: (payload) => message.reply(payload),
          options: { getUser: () => message.mentions.users.first() || null }
        });
      } catch (e) {
        console.error('Erreur puissance4 pr√©fixe :', e);
        message.reply('‚ùå Probl√®me dans /puissance4.');
      }
      return;
    }

    // 5) Bingo en mode pr√©fixe
    if (commandName === 'bingo') {
      try {
        await bingoExecute({
          guild: message.guild,
          user: message.author,
          reply: (payload) => message.reply(payload)
        });
      } catch (e) {
        console.error('Erreur bingo pr√©fixe :', e);
        message.reply('‚ùå Probl√®me dans /bingo.');
      }
      return;
    }

    // 6) Pendu en mode pr√©fixe
    if (commandName === 'pendu') {
      try {
        await penduExecute({
          guild: message.guild,
          user: message.author,
          reply: (payload) => message.reply(payload),
          options: { getUser: () => message.mentions.users.first() || null }
        });
      } catch (e) {
        console.error('Erreur pendu pr√©fixe :', e);
        message.reply('‚ùå Probl√®me dans /pendu.');
      }
      return;
    }

    // 7) D√©mineur en mode pr√©fixe
    if (commandName === 'demineur') {
      try {
        await demineurExecute({
          guild: message.guild,
          user: message.author,
          reply: (payload) => message.reply(payload)
        });
      } catch (e) {
        console.error('Erreur demineur pr√©fixe :', e);
        message.reply('‚ùå Probl√®me dans /demineur.');
      }
      return;
    }

    // 8) ColorMind en mode pr√©fixe
    if (commandName === 'colormind') {
      try {
        await colormindExecute({
          guild: message.guild,
          user: message.author,
          reply: (payload) => message.reply(payload)
        });
      } catch (e) {
        console.error('Erreur colormind pr√©fixe :', e);
        message.reply('‚ùå Probl√®me dans /colormind.');
      }
      return;
    }

    // 9) Attribution de r√¥les
    if (commandName === 'role-config') {
      const handled = await configureRoleSystem(message, args);
      if (handled) return;
    }

    if (commandName === 'create-rules') {
      const handled = await createRuleAcceptanceMessage(message, args);
      if (handled) return;
    }

    // 10) commandes Auto Features
    let handled = false;
    handled = await AutoFeaturesCommands(commandName, message, args, prefix);
    if (handled) return;

    // 11) commandes de mod√©ration
    handled = await moderationCommands(commandName, message, args);
    if (handled) return;

    // 12) autres commandes personnalis√©es (autre.js)
    handled = await handleOthersCommand(commandName, message, args);
    if (handled) return;

    // 13) commandes musique
    handled = await musiqueCommandes(commandName, message, args);
    if (handled) return;

    // Si on arrive ici, c'est que la commande n'a pas √©t√© g√©r√©e
    await message.reply({ content: `‚ùå Commande "${commandName}" non reconnue. Tape \`${prefix}help\` pour voir la liste.` });
  } catch (error) {
    console.error('Erreur globale dans messageCreate:', error);
  }
});

// ===== GESTIONNAIRE DE R√âACTIONS CORRIG√â =====
client.on('messageReactionAdd', async (reaction, user) => {
  console.log(`[DEBUG REACTION] R√©action ajout√©e par ${user.tag} : ${reaction.emoji.name || reaction.emoji.id} sur le message ${reaction.message.id}`);
  
  // Ignorer les r√©actions du bot lui-m√™me
  if (user.bot) return;
  
  try {
    // ‚úÖ CORRECTION MAJEURE : Gestion des partials
    // Si la r√©action est partielle, la r√©cup√©rer compl√®tement
    if (reaction.partial) {
      try {
        console.log('[DEBUG REACTION] R√©cup√©ration de la r√©action partielle...');
        await reaction.fetch();
        console.log('[DEBUG REACTION] R√©action r√©cup√©r√©e avec succ√®s');
      } catch (error) {
        console.error('Erreur lors de la r√©cup√©ration de la r√©action:', error);
        return;
      }
    }

    // V√©rifier qu'on est dans un serveur
    if (!reaction.message.guild) {
      console.log('[DEBUG REACTION] R√©action en DM, ignor√©e');
      return;
    }

    const guild = reaction.message.guild;
    
    // ‚úÖ CORRECTION : R√©cup√©rer le membre de mani√®re plus robuste
    let member;
    try {
      member = await guild.members.fetch(user.id);
    } catch (error) {
      console.error(`Erreur lors de la r√©cup√©ration du membre ${user.id}:`, error);
      return;
    }
    
    if (!member) {
      console.log(`[DEBUG REACTION] Membre ${user.id} non trouv√©`);
      return;
    }

    console.log(`[DEBUG REACTION] R√©action trait√©e: ${user.tag} - ${reaction.emoji.name || reaction.emoji.id} - Message: ${reaction.message.id}`);

    // ‚úÖ CORRECTION : Normaliser l'emoji pour la comparaison
    let emojiIdentifier = reaction.emoji.name;
    if (reaction.emoji.id) {
      // Emoji personnalis√©
      emojiIdentifier = reaction.emoji.id;
    } else if (!emojiIdentifier) {
      // Fallback avec toString()
      emojiIdentifier = reaction.emoji.toString();
    }

    console.log(`[DEBUG REACTION] Emoji normalis√©: '${emojiIdentifier}'`);

    // Appeler le handler d'attribution de r√¥les
    await handleRoleAssignment('reaction_add', {
      guild: guild,
      user: user,
      member: member,
      messageId: reaction.message.id,
      emoji: emojiIdentifier
    }, client);

  } catch (error) {
    console.error('Erreur dans messageReactionAdd:', error);
    console.error('Stack trace:', error.stack);
  }
});

// Optionnel : G√©rer aussi la suppression de r√©action si vous voulez retirer les r√¥les
client.on('messageReactionRemove', async (reaction, user) => {
  if (user.bot) return;
  
  try {
    // Gestion des partials
    if (reaction.partial) {
      try {
        await reaction.fetch();
      } catch (error) {
        console.error('Erreur lors de la r√©cup√©ration de la r√©action supprim√©e:', error);
        return;
      }
    }

    if (!reaction.message.guild) return;

    const guild = reaction.message.guild;
    const member = await guild.members.fetch(user.id).catch(() => null);
    
    if (!member) return;

    console.log(`[DEBUG REACTION REMOVE] R√©action supprim√©e par ${user.tag} : ${reaction.emoji.name || reaction.emoji.id} sur le message ${reaction.message.id}`);

    // Vous pouvez impl√©menter la logique de suppression de r√¥le ici si n√©cessaire
    // await handleRoleRemoval('reaction_remove', { ... }, client);

  } catch (error) {
    console.error('Erreur dans messageReactionRemove:', error);
  }
});

// Listeners d'√©v√©nements pour logs g√©n√©raux
client.on(messageDeleteLog.name, (...args) => messageDeleteLog.execute(...args));
client.on(messageUpdateLog.name, (...args) => messageUpdateLog.execute(...args));
client.on(channelCreateLog.name, (...args) => channelCreateLog.execute(...args));
client.on(channelDeleteLog.name, (...args) => channelDeleteLog.execute(...args));
client.on(channelUpdateLog.name, (...args) => channelUpdateLog.execute(...args));
client.on(roleCreateLog.name, (...args) => roleCreateLog.execute(...args));
client.on(roleDeleteLog.name, (...args) => roleDeleteLog.execute(...args));
client.on(roleUpdateLog.name, (...args) => roleUpdateLog.execute(...args));

// Express setup
const app = express();
app.use(express.urlencoded({ extended: true }));
app.use(express.json());
app.set('layout', 'layout');
app.use(expressLayouts);
app.use(session({
  secret: process.env.SESSION_SECRET || 'supersecretkey',
  resave: false,
  saveUninitialized: false
}));
app.use(passport.initialize());
app.use(passport.session());

passport.serializeUser((user, done) => done(null, user));
passport.deserializeUser((obj, done) => done(null, obj));
passport.use(new Strategy({
  clientID: clientId,
  clientSecret: clientSecret,
  callbackURL: callbackUrl,
  scope: ['identify', 'guilds']
}, (accessToken, refreshToken, profile, done) => process.nextTick(() => done(null, profile))));

app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));
app.use(express.static(path.join(__dirname, 'public')));

// Routes Express
app.get('/login', passport.authenticate('discord'));
app.get('/auth/discord/callback',
  passport.authenticate('discord', { failureRedirect: '/' }),
  (req, res) => res.redirect('/')
);
app.get('/logout', (req, res, next) => {
  req.logout(err => {
    if (err) return next(err);
    res.redirect('/');
  });
});

app.get('/', isAuthenticated, async (req, res) => {
  const ADMIN = BigInt(PermissionsBitField.Flags.Administrator);
  const guilds = req.user.guilds.filter(
    g => (BigInt(g.permissions) & ADMIN) === ADMIN && client.guilds.cache.has(g.id)
  );
  res.render('home', { user: req.user, guilds, title: 'Accueil Dashboard' });
});

// ===== ROUTE GET /server/:id CORRIG√âE =====
app.get('/server/:id', isAuthenticated, async (req, res) => {
  const guildId = req.params.id;
  
  try {
    // V√©rifications d'autorisation
    if (!client.guilds.cache.has(guildId)) {
      return res.redirect('/');
    }

    const userGuild = req.user.guilds.find(g => g.id === guildId);
    const ADMIN = BigInt(PermissionsBitField.Flags.Administrator);
    if (!userGuild || (BigInt(userGuild.permissions) & ADMIN) !== ADMIN) {
      return res.redirect('/');
    }

    const guild = client.guilds.cache.get(guildId);
    let guildSettings = await getGuildSettings(guildId);

    // ‚úÖ CORRECTION MAJEURE : Initialiser reglementConfig si manquant
    if (!guildSettings.reglementConfig) {
      console.log(`[Dashboard] FORCE initialisation reglementConfig pour ${guildId}`);
      guildSettings.reglementConfig = getDefaultReglementConfig();
      
      // Sauvegarder imm√©diatement cette initialisation
      try {
        await saveGuildSettings(guildId, guildSettings);
        console.log(`[Dashboard] ‚úÖ reglementConfig initialis√© et sauvegard√©`);
      } catch (saveError) {
        console.error(`[Dashboard] Erreur sauvegarde initialisation r√®glement:`, saveError);
      }
    }

    // S'assurer que langueRoles a la bonne structure
    if (!guildSettings.langueRoles || typeof guildSettings.langueRoles !== 'object') {
      guildSettings.langueRoles = {
        fr: '', en: '', es: '', de: '', pt: '', ru: '', hu: '', it: ''
      };
    }

    console.log(`[Dashboard Debug GET] reglementConfig pr√©sent:`, !!guildSettings.reglementConfig);
    console.log(`[Dashboard Debug GET] reglementConfig.enabled:`, guildSettings.reglementConfig?.enabled);
    console.log(`[Dashboard Debug GET /server/${guildId}] Settings pour render:`, JSON.stringify(guildSettings, null, 2));

    // R√©cup√©rer les canaux et r√¥les
    const channels = guild.channels.cache
      .filter(c => c.type === ChannelType.GuildText || c.type === ChannelType.GuildCategory)
      .sort((a, b) => a.position - b.position)
      .map(c => ({ id: c.id, name: c.name, type: c.type }));

    const roles = guild.roles.cache
      .filter(role => role.id !== guild.id) // Exclure @everyone
      .sort((a, b) => b.position - a.position)
      .map(role => ({ id: role.id, name: role.name, color: role.hexColor }));

    res.render('dashboard-server', {
      user: req.user,
      guild,
      settings: guildSettings, // ‚Üê Maintenant avec reglementConfig garanti
      channels,
      roles,
      LANGUE_CODES: LANGUE_CODES,
      supportedLanguagesMap: supportedLanguagesMap,
      logEventsAvailable: [
        'memberJoin', 'memberLeave', 'messageDelete', 'messageUpdate',
        'channelCreate', 'channelDelete', 'channelUpdate',
        'roleCreate', 'roleDelete', 'roleUpdate'
      ],
      client: client
    });

  } catch (error) {
    console.error(`Erreur chargement dashboard pour la guilde ${guildId}:`, error);
    res.redirect('/');
  }
});

// ===== ROUTES CORRIG√âES POUR LE R√àGLEMENT =====

// Route pour l'envoi automatique du r√®glement
app.post('/server/:guildId/send-reglement', isAuthenticated, async (req, res) => {
  try {
    const { guildId } = req.params;
    const { reglementConfig, targetChannelId, updateExisting } = req.body;

    console.log('[Send Reglement] D√©but pour:', guildId);

    // V√©rifier que l'utilisateur a les permissions
    if (!req.user) {
      return res.status(401).json({ success: false, error: 'Non authentifi√©' });
    }

    // R√©cup√©rer le serveur
    const guild = client.guilds.cache.get(guildId);
    if (!guild) {
      return res.status(404).json({ success: false, error: 'Serveur non trouv√©' });
    }

    // V√©rifier les permissions de l'utilisateur
    const userGuild = req.user.guilds.find(g => g.id === guildId);
    const ADMIN = BigInt(PermissionsBitField.Flags.Administrator);
    if (!userGuild || (BigInt(userGuild.permissions) & ADMIN) !== ADMIN) {
      return res.status(403).json({ success: false, error: 'Permissions insuffisantes' });
    }

    // R√©cup√©rer le salon cible
    const targetChannel = guild.channels.cache.get(targetChannelId);
    if (!targetChannel || !targetChannel.isTextBased()) {
      return res.status(400).json({ success: false, error: 'Salon invalide ou inaccessible' });
    }

    // V√©rifier les permissions du bot
    const botPermissions = targetChannel.permissionsFor(guild.members.me);
    if (!botPermissions || !botPermissions.has(['SendMessages', 'EmbedLinks'])) {
      return res.status(400).json({ 
        success: false, 
        error: 'Le bot n\'a pas les permissions n√©cessaires dans ce salon' 
      });
    }

    // Cr√©er l'embed du r√®glement
    const embed = createReglementEmbed(reglementConfig, guild);
    const buttons = createReglementButtons(reglementConfig);

    let sentMessage;
    let isUpdate = false;

    // Si updateExisting est true, essayer de mettre √† jour le message existant
    if (updateExisting && reglementConfig.lastMessageId) {
      try {
        const existingMessage = await targetChannel.messages.fetch(reglementConfig.lastMessageId);
        if (existingMessage && existingMessage.author.id === client.user.id) {
          await existingMessage.edit({
            embeds: [embed],
            components: [buttons]
          });
          sentMessage = existingMessage;
          isUpdate = true;
          console.log('[Send Reglement] Message existant mis √† jour');
        }
      } catch (error) {
        console.log('[Send Reglement] Message existant non trouv√©, cr√©ation d\'un nouveau');
      }
    }

    // Si pas de mise √† jour, cr√©er un nouveau message
    if (!sentMessage) {
      sentMessage = await targetChannel.send({
        embeds: [embed],
        components: [buttons]
      });
      console.log('[Send Reglement] Nouveau message cr√©√©');
    }

    // Mettre √† jour les param√®tres avec l'ID du message et la date d'envoi
    const guildSettings = await getGuildSettings(guildId);
    if (!guildSettings.reglementConfig) {
      guildSettings.reglementConfig = {};
    }
    
    guildSettings.reglementConfig.lastMessageId = sentMessage.id;
    guildSettings.reglementConfig.lastSent = new Date().toISOString();
    guildSettings.reglementConfig.lastChannelId = targetChannelId;
    
    await saveGuildSettings(guildId, guildSettings);

    res.json({
      success: true,
      messageId: sentMessage.id,
      channelName: targetChannel.name,
      isUpdate: isUpdate,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('[Send Reglement] Erreur:', error);
    res.status(500).json({ 
      success: false, 
      error: error.message || 'Erreur interne du serveur' 
    });
  }
});

// ===== ROUTE PRINCIPALE DE MISE √Ä JOUR (FUSIONN√âE ET CORRIG√âE) =====
app.post('/server/:guildId/update', isAuthenticated, async (req, res) => {
  const guildId = req.params.guildId;
  console.log(`[Server Update] D√©but mise √† jour pour:`, guildId);
  
  try {
    // V√©rifications d'autorisation
    const userGuild = req.user.guilds.find(g => g.id === guildId);
    const ADMIN = BigInt(PermissionsBitField.Flags.Administrator);
    if (!userGuild || (BigInt(userGuild.permissions) & ADMIN) !== ADMIN) {
      return res.status(403).send('Acc√®s refus√©.');
    }

    console.log('[Server Update] Body re√ßu:', Object.keys(req.body));

    // R√©cup√©rer les param√®tres existants
    let guildSettings = await getGuildSettings(guildId);
    if (!guildSettings) {
      guildSettings = { guildId: guildId };
    }

    // === FONCTIONS HELPER ===
    const cleanStringValue = (value, defaultValue = '') => (typeof value === 'string' ? value.trim() : defaultValue);
    const cleanNullableStringValue = (value) => (typeof value === 'string' && value.trim() !== '' ? value.trim() : null);

    // === TRAITEMENT DES PARAM√àTRES G√âN√âRAUX ===
    if (req.body.prefix) {
      guildSettings.prefix = cleanStringValue(req.body.prefix, '!');
    }

    // === TRAITEMENT DES MESSAGES DE BIENVENUE ===
    guildSettings.welcomeEnabled = req.body.welcomeEnabled === 'true';
    guildSettings.goodbyeEnabled = req.body.goodbyeEnabled === 'true';
    guildSettings.welcomeChannel = cleanNullableStringValue(req.body.welcomeChannel);
    guildSettings.welcomeMessage = cleanStringValue(req.body.welcomeMessage);
    guildSettings.goodbyeMessage = cleanStringValue(req.body.goodbyeMessage);

    // === TRAITEMENT DES TICKETS ===
    guildSettings.ticketCategoryID = cleanNullableStringValue(req.body.ticketCategoryID);
    guildSettings.ticketLogChannelID = cleanNullableStringValue(req.body.ticketLogChannelID);
    
    // Traitement des r√¥les de support
    if (req.body.ticketSupportRoles) {
      guildSettings.ticketSupportRoles = req.body.ticketSupportRoles
        .split(',')
        .map(id => id.trim())
        .filter(id => id.length > 0);
    } else {
      guildSettings.ticketSupportRoles = [];
    }

    // === TRAITEMENT DES LOGS ===
    guildSettings.logChannelID = cleanNullableStringValue(req.body.logChannelID);
    guildSettings.logEvents = Array.isArray(req.body.logEvents) ? req.body.logEvents : [];

    // === TRAITEMENT DES LANGUES ===
    const langueRoles = {};
    const langueKeys = ['fr', 'en', 'es', 'de', 'pt', 'ru', 'hu', 'it'];
    langueKeys.forEach(lang => {
      const roleId = cleanNullableStringValue(req.body[`lang_${lang}`]);
      if (roleId) {
        langueRoles[lang] = roleId;
      }
    });
    guildSettings.langueRoles = langueRoles;

    if (req.body.setlanguesRequiredRoles) {
      guildSettings.setlanguesRequiredRoles = req.body.setlanguesRequiredRoles
        .split(',')
        .map(id => id.trim())
        .filter(id => id.length > 0);
    } else {
      guildSettings.setlanguesRequiredRoles = [];
    }

    // === TRAITEMENT DES SYST√àMES DE TRADUCTION ===
    if (req.body.translationSystemsData) {
      try {
        const translationData = JSON.parse(req.body.translationSystemsData);
        guildSettings.translationSystems = translationData;
        console.log('[Server Update] Syst√®mes de traduction mis √† jour:', translationData.length);
      } catch (error) {
        console.error('[Server Update] Erreur parsing translationSystemsData:', error);
        guildSettings.translationSystems = [];
      }
    } else {
      guildSettings.translationSystems = [];
    }

    // === TRAITEMENT DES SYST√àMES D'ATTRIBUTION DE R√îLES ===
    if (req.body.roleAssignmentSystemsData) {
      try {
        const roleData = JSON.parse(req.body.roleAssignmentSystemsData);
        guildSettings.roleAssignmentSystems = roleData;
        console.log('[Server Update] Syst√®mes d\'attribution de r√¥les mis √† jour:', roleData.length);
      } catch (error) {
        console.error('[Server Update] Erreur parsing roleAssignmentSystemsData:', error);
        guildSettings.roleAssignmentSystems = [];
      }
    } else {
      guildSettings.roleAssignmentSystems = [];
    }

    // === TRAITEMENT DU R√àGLEMENT (CORRIG√â) ===
  // === TRAITEMENT DU R√àGLEMENT (CORRIG√â) ===
if (req.body.reglementConfigData) {
  try {
    let reglementData;
    
    // G√©rer les cas o√π les donn√©es sont un array ou une string
    if (Array.isArray(req.body.reglementConfigData)) {
      reglementData = req.body.reglementConfigData.find(item => item && item.trim() !== '');
    } else {
      reglementData = req.body.reglementConfigData;
    }
    
    if (typeof reglementData === 'string' && reglementData.trim() !== '') {
      const parsedReglementConfig = JSON.parse(reglementData);
      
      // ‚úÖ CORRECTION : S'assurer que les champs sont bien pr√©sents
      if (!parsedReglementConfig.targetChannelId && req.body.reglementTargetChannelHidden) {
        parsedReglementConfig.targetChannelId = req.body.reglementTargetChannelHidden;
      }
      
      if (parsedReglementConfig.autoSend === undefined && req.body.reglementAutoSendHidden) {
        parsedReglementConfig.autoSend = req.body.reglementAutoSendHidden === 'true';
      }
      
      guildSettings.reglementConfig = parsedReglementConfig;
      console.log('[Server Update] Configuration du r√®glement mise √† jour:', parsedReglementConfig.enabled);
      console.log('[Server Update] Envoi automatique:', parsedReglementConfig.autoSend);
      console.log('[Server Update] Salon cible:', parsedReglementConfig.targetChannelId);
    } else {
      console.log('[Server Update] Donn√©es de r√®glement vides, conservation config existante');
      if (!guildSettings.reglementConfig) {
        guildSettings.reglementConfig = getDefaultReglementConfig();
      }
    }
  } catch (error) {
    console.error('[Server Update] Erreur parsing reglementConfigData:', error);
    guildSettings.reglementConfig = guildSettings.reglementConfig || getDefaultReglementConfig();
  }
} else {
  console.log('[Server Update] Aucune donn√©e de r√®glement re√ßue');
  if (!guildSettings.reglementConfig) {
    guildSettings.reglementConfig = getDefaultReglementConfig();
  }
}

// ‚úÖ TRAITEMENT DIRECT DES CHAMPS CACH√âS EN FALLBACK
if (req.body.reglementTargetChannelHidden) {
  guildSettings.reglementConfig.targetChannelId = req.body.reglementTargetChannelHidden;
}

if (req.body.reglementAutoSendHidden !== undefined) {
  guildSettings.reglementConfig.autoSend = req.body.reglementAutoSendHidden === 'true';
}

    // === SAUVEGARDE ===
    await saveGuildSettings(guildId, guildSettings);
    console.log('[Server Update] Param√®tres sauvegard√©s avec succ√®s');

    // === ENVOI AUTOMATIQUE DU R√àGLEMENT ===
    if (guildSettings.reglementConfig?.enabled && 
        guildSettings.reglementConfig?.autoSend && 
        guildSettings.reglementConfig?.targetChannelId) {
      
      try {
        console.log('[Server Update] Lancement de l\'envoi automatique du r√®glement...');
        const autoSendResult = await sendReglementAutomatically(guildId, guildSettings.reglementConfig);
        
        // Mettre √† jour les param√®tres avec les infos d'envoi
        guildSettings.reglementConfig.lastMessageId = autoSendResult.messageId;
        guildSettings.reglementConfig.lastSent = autoSendResult.timestamp;
        guildSettings.reglementConfig.lastChannelId = guildSettings.reglementConfig.targetChannelId;
        
        await saveGuildSettings(guildId, guildSettings);
        console.log('[Server Update] R√®glement envoy√© automatiquement:', autoSendResult);
      } catch (autoSendError) {
        console.error('[Server Update] Erreur lors de l\'envoi automatique du r√®glement:', autoSendError);
        // Ne pas faire √©chouer la sauvegarde
      }
    }

    // === REDIRECTION AVEC SUCC√àS ===
    res.redirect(`/server/${guildId}?saved=true&timestamp=${Date.now()}`);

  } catch (error) {
    console.error('[Server Update] Erreur lors de la mise √† jour:', error);
    console.error('[Server Update] Stack trace:', error.stack);
    
    // Retourner une page d'erreur HTML plut√¥t qu'un JSON
    res.status(500).send(`
      <!DOCTYPE html>
      <html>
      <head>
        <title>Erreur de sauvegarde</title>
        <style>
          body { font-family: Arial, sans-serif; margin: 40px; }
          .error { background: #fee; border: 1px solid #fcc; padding: 20px; border-radius: 5px; }
          .back-link { margin-top: 20px; }
          .back-link a { color: #0066cc; text-decoration: none; }
        </style>
      </head>
      <body>
        <div class="error">
          <h1>‚ùå Erreur lors de la sauvegarde</h1>
          <p><strong>Message d'erreur :</strong> ${error.message}</p>
          <p>Veuillez r√©essayer ou contacter l'administrateur si le probl√®me persiste.</p>
        </div>
        <div class="back-link">
          <a href="/server/${guildId}">‚Üê Retourner au dashboard</a>
        </div>
      </body>
      </html>
    `);
  }
});

// === guildMemberAdd et guildMemberRemove CORRIG√âS ===
client.on('guildMemberAdd', async (member) => {
  try {
    const guildSettings = await getGuildSettings(member.guild.id);
    
    // Messages de bienvenue existants
    if (guildSettings?.welcomeEnabled && guildSettings?.welcomeChannel) {
      const channel = member.guild.channels.cache.get(guildSettings.welcomeChannel);
      if (channel && channel.isTextBased()) {
        const welcomeMessage = guildSettings.welcomeMessage
          .replace(/{user}/g, `<@${member.id}>`)
          .replace(/{username}/g, member.user.username)
          .replace(/{server}/g, member.guild.name);
        
        await channel.send(welcomeMessage);
      }
    }

    // Attribution automatique de r√¥les
    await handleRoleAssignment('member_join', {
      guild: member.guild,
      user: member.user,
      member: member
    }, client);

  } catch (error) {
    console.error('Erreur dans guildMemberAdd:', error);
  }
});

client.on('guildMemberRemove', async (member) => {
  try {
    const guildSettings = await getGuildSettings(member.guild.id);
    if (!guildSettings || !guildSettings.goodbyeEnabled || !guildSettings.welcomeChannel) return;

    const channel = member.guild.channels.cache.get(guildSettings.welcomeChannel);
    if (channel && channel.isTextBased()) {
      const goodbyeMessage = guildSettings.goodbyeMessage
        .replace(/{user}/g, `<@${member.id}>`)
        .replace(/{username}/g, member.user.username)
        .replace(/{server}/g, member.guild.name);

      await channel.send(goodbyeMessage);
    }
  } catch (error) {
    console.error('Erreur dans guildMemberRemove:', error);
  }
});

// === D√âMARRAGE DU SERVEUR EXPRESS ===
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`üöÄ Serveur Express d√©marr√© sur http://localhost:${PORT}`);
});

app.get('/health', (req, res) => res.send('OK'));

// === NETTOYAGE P√âRIODIQUE ===
setInterval(async () => {
  try {
    await cleanupOldBackups();
    console.log('üßπ Nettoyage automatique des sauvegardes effectu√©');
  } catch (error) {
    console.error('‚ùå Erreur lors du nettoyage automatique:', error);
  }
}, 60 * 60 * 1000); // Toutes les heures