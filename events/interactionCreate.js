// Gestionnaire d'√©v√©nements pour les interactions des boutons
// √Ä placer dans votre fichier d'√©v√©nements (ex: events/interactionCreate.js)

const { Events } = require('discord.js');

module.exports = {
    name: Events.InteractionCreate,
    async execute(interaction) {
        // V√©rifier si c'est une interaction de bouton
        if (!interaction.isButton()) return;

        // G√©rer les boutons du r√®glement
        if (interaction.customId === 'accept_rules' || interaction.customId === 'decline_rules') {
            await handleReglementButtonInteraction(interaction);
        }
    },
};

async function handleReglementButtonInteraction(interaction) {
    try {
        const { customId, user, guild } = interaction;
        
        // R√©cup√©rer les param√®tres du serveur
        const guildSettings = await getGuildSettings(guild.id);
        
        if (customId === 'accept_rules') {
            // L'utilisateur accepte le r√®glement
            await interaction.reply({
                content: '‚úÖ Merci d\'avoir accept√© le r√®glement ! Vous allez recevoir vos r√¥les automatiquement.',
                ephemeral: true
            });
            
            // Attribuer les r√¥les via le syst√®me d'attribution de r√¥les
            await processRoleAssignment(interaction, 'accept_rules');
            
            // Logger l'acceptation
            await logReglementAcceptance(interaction, true);
            
        } else if (customId === 'decline_rules') {
            // L'utilisateur refuse le r√®glement
            await interaction.reply({
                content: '‚ùå Vous avez refus√© le r√®glement. Vous ne pourrez pas acc√©der aux fonctionnalit√©s du serveur tant que vous n\'acceptez pas les r√®gles.',
                ephemeral: true
            });
            
            // Logger le refus
            await logReglementAcceptance(interaction, false);
        }
        
    } catch (error) {
        console.error('Erreur lors du traitement de l\'interaction du r√®glement:', error);
        
        if (!interaction.replied) {
            await interaction.reply({
                content: '‚ùå Une erreur s\'est produite lors du traitement de votre r√©ponse.',
                ephemeral: true
            });
        }
    }
}

// Fonction pour traiter l'attribution de r√¥les
async function processRoleAssignment(interaction, buttonId) {
    try {
        const guildSettings = await getGuildSettings(interaction.guild.id);
        
        // Chercher les syst√®mes d'attribution de r√¥les qui correspondent au bouton
        if (!guildSettings.roleAssignmentSystems) return;
        
        const relevantSystems = guildSettings.roleAssignmentSystems.filter(system => 
            system.enabled && 
            system.condition === 'button_click' && 
            system.triggerData?.buttonId === buttonId &&
            system.targetRole
        );
        
        const member = await interaction.guild.members.fetch(interaction.user.id);
        
        for (const system of relevantSystems) {
            try {
                const role = interaction.guild.roles.cache.get(system.targetRole);
                
                if (role && !member.roles.cache.has(role.id)) {
                    await member.roles.add(role);
                    console.log(`R√¥le ${role.name} attribu√© √† ${member.user.tag} via le syst√®me ${system.name}`);
                    
                    // Envoyer une notification de succ√®s
                    if (interaction.replied || interaction.deferred) {
                        await interaction.followUp({
                            content: `üé≠ Vous avez re√ßu le r√¥le **${role.name}** !`,
                            ephemeral: true
                        });
                    }
                }
            } catch (roleError) {
                console.error(`Erreur lors de l'attribution du r√¥le pour le syst√®me ${system.name}:`, roleError);
            }
        }
        
    } catch (error) {
        console.error('Erreur lors du traitement de l\'attribution de r√¥les:', error);
    }
}

// Fonction pour logger les acceptations/refus du r√®glement
async function logReglementAcceptance(interaction, accepted) {
    try {
        const guildSettings = await getGuildSettings(interaction.guild.id);
        
        // V√©rifier s'il y a un salon de logs configur√©
        const logChannelId = guildSettings.logChannelID;
        if (!logChannelId) return;
        
        const logChannel = interaction.guild.channels.cache.get(logChannelId);
        if (!logChannel || !logChannel.isTextBased()) return;
        
        const { EmbedBuilder } = require('discord.js');
        
        const logEmbed = new EmbedBuilder()
            .setTitle('üìã Interaction R√®glement')
            .setColor(accepted ? '#2ecc71' : '#e74c3c')
            .addFields(
                { name: 'üë§ Utilisateur', value: `${interaction.user.tag} (${interaction.user.id})`, inline: true },
                { name: 'üìÖ Date', value: new Date().toLocaleString('fr-FR'), inline: true },
                { name: '‚úÖ Action', value: accepted ? 'Accept√©' : 'Refus√©', inline: true },
                { name: 'üí¨ Salon', value: `${interaction.channel}`, inline: true }
            )
            .setThumbnail(interaction.user.displayAvatarURL())
            .setTimestamp();
        
        await logChannel.send({ embeds: [logEmbed] });
        
    } catch (error) {
        console.error('Erreur lors du logging de l\'acceptation du r√®glement:', error);
    }
}

// Fonction helper pour r√©cup√©rer les param√®tres (√† adapter selon votre syst√®me)
async function getGuildSettings(guildId) {
    // Impl√©mentez selon votre syst√®me de base de donn√©es
    // Exemple avec un fichier JSON :
    const fs = require('fs').promises;
    const path = require('path');
    
    try {
        const settingsPath = path.join(__dirname, '..', 'data', `${guildId}.json`);
        const data = await fs.readFile(settingsPath, 'utf8');
        return JSON.parse(data);
    } catch (error) {
        return {
            roleAssignmentSystems: [],
            reglementConfig: { enabled: false }
        };
    }
}